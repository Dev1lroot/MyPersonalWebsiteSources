import {
  require_three
} from "./chunk-GEFYRFNB.js";
import {
  __commonJS
} from "./chunk-Y2F7D3TJ.js";

// node_modules/three-text2d/lib/utils.js
var require_utils = __commonJS({
  "node_modules/three-text2d/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var three_1 = require_three();
    exports.textAlign = {
      center: new three_1.Vector2(0, 0),
      left: new three_1.Vector2(1, 0),
      top: new three_1.Vector2(0, -1),
      topLeft: new three_1.Vector2(1, -1),
      topRight: new three_1.Vector2(-1, -1),
      right: new three_1.Vector2(-1, 0),
      bottom: new three_1.Vector2(0, 1),
      bottomLeft: new three_1.Vector2(1, 1),
      bottomRight: new three_1.Vector2(-1, 1)
    };
    var fontHeightCache = {};
    function getFontHeight(fontStyle) {
      var result = fontHeightCache[fontStyle];
      if (!result) {
        var body = document.getElementsByTagName("body")[0];
        var dummy = document.createElement("div");
        var dummyText = document.createTextNode("MÃ‰q");
        dummy.appendChild(dummyText);
        dummy.setAttribute("style", "font:" + fontStyle + ";position:absolute;top:0;left:0");
        body.appendChild(dummy);
        result = dummy.offsetHeight;
        fontHeightCache[fontStyle] = result;
        body.removeChild(dummy);
      }
      return result;
    }
    exports.getFontHeight = getFontHeight;
  }
});

// node_modules/three-text2d/lib/CanvasText.js
var require_CanvasText = __commonJS({
  "node_modules/three-text2d/lib/CanvasText.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var THREE = require_three();
    var utils_1 = require_utils();
    var CanvasText = (
      /** @class */
      function() {
        function CanvasText2() {
          this.textWidth = null;
          this.textHeight = null;
          this.canvas = document.createElement("canvas");
          this.ctx = this.canvas.getContext("2d");
        }
        Object.defineProperty(CanvasText2.prototype, "width", {
          get: function() {
            return this.canvas.width;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(CanvasText2.prototype, "height", {
          get: function() {
            return this.canvas.height;
          },
          enumerable: true,
          configurable: true
        });
        CanvasText2.prototype.drawText = function(text, ctxOptions) {
          var _this = this;
          this.ctx.font = ctxOptions.font;
          var lineHeight = utils_1.getFontHeight(ctxOptions.font);
          var lines = (text || "").toString().split("\n");
          this.textWidth = Math.max.apply(null, lines.map(function(line) {
            return Math.ceil(_this.ctx.measureText(line).width);
          }));
          this.textHeight = lineHeight + lineHeight * ctxOptions.lineHeight * (lines.length - 1);
          this.canvas.width = Math.max(2, THREE.Math.ceilPowerOfTwo(this.textWidth + 2 * ctxOptions.horizontalPadding));
          this.canvas.height = Math.max(2, THREE.Math.ceilPowerOfTwo(this.textHeight + 2 * ctxOptions.verticalPadding));
          this.ctx.font = ctxOptions.font;
          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
          if (ctxOptions.backgroundColor) {
            this.ctx.fillStyle = ctxOptions.backgroundColor;
            this.ctx.fillRect(0, 0, this.textWidth + 2 * ctxOptions.horizontalPadding, this.textHeight + 2 * ctxOptions.verticalPadding);
          }
          this.ctx.fillStyle = ctxOptions.fillStyle;
          if (ctxOptions.align.x === 1)
            this.ctx.textAlign = "left";
          else if (ctxOptions.align.x === 0)
            this.ctx.textAlign = "center";
          else
            this.ctx.textAlign = "right";
          this.ctx.textBaseline = "top";
          this.ctx.shadowColor = ctxOptions.shadowColor;
          this.ctx.shadowBlur = ctxOptions.shadowBlur;
          this.ctx.shadowOffsetX = ctxOptions.shadowOffsetX;
          this.ctx.shadowOffsetY = ctxOptions.shadowOffsetY;
          var x = this.textWidth * (0.5 - ctxOptions.align.x * 0.5);
          var y = 0.5 * (lineHeight * ctxOptions.lineHeight - lineHeight);
          for (var i = 0; i < lines.length; i++) {
            this.ctx.fillText(lines[i], x + ctxOptions.horizontalPadding, lineHeight * ctxOptions.lineHeight * i + ctxOptions.verticalPadding + y);
          }
          return this.canvas;
        };
        return CanvasText2;
      }()
    );
    exports.CanvasText = CanvasText;
  }
});

// node_modules/three-text2d/lib/Text2D.js
var require_Text2D = __commonJS({
  "node_modules/three-text2d/lib/Text2D.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var THREE = require_three();
    var utils_1 = require_utils();
    var CanvasText_1 = require_CanvasText();
    var Text2D = (
      /** @class */
      function(_super) {
        __extends(Text2D2, _super);
        function Text2D2(text, options) {
          if (text === void 0) {
            text = "";
          }
          if (options === void 0) {
            options = {};
          }
          var _this = _super.call(this) || this;
          _this._align = new THREE.Vector2();
          _this._font = options.font || "30px Arial";
          _this._fillStyle = options.fillStyle || "#FFFFFF";
          _this._shadowColor = options.shadowColor || "rgba(0, 0, 0, 0)";
          _this._shadowBlur = options.shadowBlur || 0;
          _this._shadowOffsetX = options.shadowOffsetX || 0;
          _this._shadowOffsetY = options.shadowOffsetY || 0;
          _this._lineHeight = options.lineHeight || 1.2;
          _this._backgroundColor = options.backgroundColor || "transparent";
          _this._horizontalPadding = options.horizontalPadding || 0;
          _this._verticalPadding = options.verticalPadding || 0;
          _this.canvas = new CanvasText_1.CanvasText();
          _this.align = options.align || utils_1.textAlign.center;
          _this.side = options.side || THREE.DoubleSide;
          _this.antialias = typeof options.antialias === "undefined" ? true : options.antialias;
          _this.text = text;
          return _this;
        }
        Object.defineProperty(Text2D2.prototype, "width", {
          get: function() {
            return this.canvas.textWidth;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Text2D2.prototype, "height", {
          get: function() {
            return this.canvas.textHeight;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Text2D2.prototype, "text", {
          get: function() {
            return this._text;
          },
          set: function(value) {
            if (this._text !== value) {
              this._text = value;
              this.updateText();
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Text2D2.prototype, "font", {
          get: function() {
            return this._font;
          },
          set: function(value) {
            if (this._font !== value) {
              this._font = value;
              this.updateText();
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Text2D2.prototype, "fillStyle", {
          get: function() {
            return this._fillStyle;
          },
          set: function(value) {
            if (this._fillStyle !== value) {
              this._fillStyle = value;
              this.updateText();
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(Text2D2.prototype, "align", {
          get: function() {
            return this._align;
          },
          set: function(value) {
            this._align.copy(value);
          },
          enumerable: true,
          configurable: true
        });
        Text2D2.prototype.cleanUp = function() {
          if (this.texture) {
            this.texture.dispose();
          }
        };
        Text2D2.prototype.applyAntiAlias = function() {
          if (this.antialias === false) {
            this.texture.magFilter = THREE.NearestFilter;
            this.texture.minFilter = THREE.LinearMipMapLinearFilter;
          }
        };
        return Text2D2;
      }(THREE.Object3D)
    );
    exports.Text2D = Text2D;
  }
});

// node_modules/three-text2d/lib/SpriteText2D.js
var require_SpriteText2D = __commonJS({
  "node_modules/three-text2d/lib/SpriteText2D.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var THREE = require_three();
    var Text2D_1 = require_Text2D();
    var SpriteText2D = (
      /** @class */
      function(_super) {
        __extends(SpriteText2D2, _super);
        function SpriteText2D2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SpriteText2D2.prototype.raycast = function() {
          return this.sprite.raycast.apply(this.sprite, arguments);
        };
        SpriteText2D2.prototype.updateText = function() {
          this.canvas.drawText(this._text, {
            font: this._font,
            fillStyle: this._fillStyle,
            shadowBlur: this._shadowBlur,
            shadowColor: this._shadowColor,
            shadowOffsetX: this._shadowOffsetX,
            shadowOffsetY: this._shadowOffsetY,
            lineHeight: this._lineHeight,
            align: this.align,
            backgroundColor: this._backgroundColor,
            horizontalPadding: this._horizontalPadding,
            verticalPadding: this._verticalPadding
          });
          this.cleanUp();
          this.texture = new THREE.Texture(this.canvas.canvas);
          this.texture.needsUpdate = true;
          this.applyAntiAlias();
          if (!this.material) {
            this.material = new THREE.SpriteMaterial({ map: this.texture });
          } else {
            this.material.map = this.texture;
          }
          if (!this.sprite) {
            this.sprite = new THREE.Sprite(this.material);
            this.add(this.sprite);
          }
          this.sprite.scale.set(this.canvas.width, this.canvas.height, 1);
          this.updateAlign();
        };
        SpriteText2D2.prototype.updateAlign = function() {
          if (this.sprite) {
            this.sprite.center.x = (0.5 - this._align.x * 0.5) * this.canvas.textWidth / this.canvas.width;
            this.sprite.center.y = 1 - (this._align.y * 0.5 + 0.5) * this.canvas.textHeight / this.canvas.height;
          }
        };
        Object.defineProperty(SpriteText2D2.prototype, "align", {
          get: function() {
            return this._align;
          },
          set: function(value) {
            this._align.copy(value);
            this.updateAlign();
          },
          enumerable: true,
          configurable: true
        });
        return SpriteText2D2;
      }(Text2D_1.Text2D)
    );
    exports.SpriteText2D = SpriteText2D;
  }
});

// node_modules/three-text2d/lib/MeshText2D.js
var require_MeshText2D = __commonJS({
  "node_modules/three-text2d/lib/MeshText2D.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var THREE = require_three();
    var Text2D_1 = require_Text2D();
    var MeshText2D = (
      /** @class */
      function(_super) {
        __extends(MeshText2D2, _super);
        function MeshText2D2(text, options) {
          if (text === void 0) {
            text = "";
          }
          if (options === void 0) {
            options = {};
          }
          return _super.call(this, text, options) || this;
        }
        MeshText2D2.prototype.raycast = function() {
          this.mesh.raycast.apply(this.mesh, arguments);
        };
        MeshText2D2.prototype.updateText = function() {
          this.cleanUp();
          this.canvas.drawText(this._text, {
            font: this._font,
            fillStyle: this._fillStyle,
            shadowBlur: this._shadowBlur,
            shadowColor: this._shadowColor,
            shadowOffsetX: this._shadowOffsetX,
            shadowOffsetY: this._shadowOffsetY,
            lineHeight: this._lineHeight,
            align: this.align,
            backgroundColor: this._backgroundColor,
            horizontalPadding: this._horizontalPadding,
            verticalPadding: this._verticalPadding
          });
          this.texture = new THREE.Texture(this.canvas.canvas);
          this.texture.needsUpdate = true;
          this.applyAntiAlias();
          if (!this.material) {
            this.material = new THREE.MeshBasicMaterial({ map: this.texture, side: this.side });
            this.material.transparent = true;
          } else {
            this.material.map = this.texture;
          }
          if (!this.mesh) {
            this.geometry = new THREE.PlaneGeometry(this.canvas.width, this.canvas.height);
            this.mesh = new THREE.Mesh(this.geometry, this.material);
            this.add(this.mesh);
          }
          this.mesh.position.x = this.canvas.width / 2 - this.canvas.textWidth / 2 + this.canvas.textWidth / 2 * this.align.x;
          this.mesh.position.y = -this.canvas.height / 2 + this.canvas.textHeight / 2 * this.align.y;
          this.geometry.vertices[0].x = this.geometry.vertices[2].x = -this.canvas.width / 2;
          this.geometry.vertices[1].x = this.geometry.vertices[3].x = this.canvas.width / 2;
          this.geometry.vertices[0].y = this.geometry.vertices[1].y = this.canvas.height / 2;
          this.geometry.vertices[2].y = this.geometry.vertices[3].y = -this.canvas.height / 2;
          this.geometry.verticesNeedUpdate = true;
        };
        return MeshText2D2;
      }(Text2D_1.Text2D)
    );
    exports.MeshText2D = MeshText2D;
  }
});

// node_modules/three-text2d/lib/index.js
var require_lib = __commonJS({
  "node_modules/three-text2d/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var SpriteText2D_1 = require_SpriteText2D();
    exports.SpriteText2D = SpriteText2D_1.SpriteText2D;
    var MeshText2D_1 = require_MeshText2D();
    exports.MeshText2D = MeshText2D_1.MeshText2D;
    var utils_1 = require_utils();
    exports.textAlign = utils_1.textAlign;
  }
});
export default require_lib();
//# sourceMappingURL=three-text2d.js.map
